import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BJ16236 {
// 아기 상어
	static class Fish{
		int r, c, s;
		public Fish(int r, int c, int s) {
			super();
			this.r = r;
			this.c = c;
			this.s = s;
		}
		
	}
	static int size = 2;
	static int cnt, N, eat;
	static int[][] arr;
	static ArrayList<Fish> list = new ArrayList<>();
	public static void main(String[] args) throws NumberFormatException, IOException {
		System.setIn(new FileInputStream("input16236.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		int sr=0, sc=0;
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j=0; j<N; j++) {
				int num = Integer.parseInt(st.nextToken());
				arr[i][j] = num;
				if (num==9) {
					sr=i;
					sc=j;
					arr[i][j] = 0;
				} else if (num!=0) {
					list.add(new Fish(i, j, num));
				}
			}
		}
		
		move(sr, sc);
		System.out.println(cnt);
	}
	

	private static void move(int sr, int sc) {
		int close = Integer.MAX_VALUE;
		Fish f=null;
		int listSize = list.size();
		for (int i=0; i<listSize; i++) {
			Fish tf=list.get(i);
			if (tf.s<size) {
				int temp = distance(tf, sr, sc);
				if (temp==0)	continue;
				if (close>temp) {
					close=temp;
					f=tf;
				}
			}
		}
		
		if(f==null) {
			return;
		}
		list.remove(f);
		if (close==Integer.MAX_VALUE)	close=0;
		cnt+=close;
		eat++;
		if (eat==size) {
			size++;
			eat=0;
		}
		
		move(f.r, f.c);
		
	}


	private static int distance(Fish tf, int sr, int sc) {
		int disArr[][] = new int[N][N];
		int dr[] = {1, 0, 0, -1};
		int dc[] = {0, -1, 1, 0};	// 상 좌 우 하
		Queue<Fish> queue = new LinkedList<>();
		queue.add(new Fish(sr, sc, size));
		
		while(!queue.isEmpty()) {
			Fish temp = queue.poll();
			for (int i=0; i<4; i++) {
				int nr = temp.r+dr[i];
				int nc = temp.c+dc[i];
				if (nr>=0 && nr<N && nc>=0 && nc<N && arr[nr][nc]<=size && disArr[nr][nc]==0) {
					disArr[nr][nc] = disArr[temp.r][temp.c]+1;
					if (nr==tf.r && nc==tf.c) {
						return disArr[nr][nc];
					}
					queue.add(new Fish(nr, nc, arr[nr][nc]));
				}
			}
		}
		return disArr[tf.r][tf.c];
	}

}
