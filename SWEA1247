import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
 
public class Solution {
// 최적 경로
     
    static int arr[][];
    static int temp[];
    static boolean isSelected[];
    static int N, min;
     
    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());
        StringBuilder sb = new StringBuilder();
        for (int t=1; t<=T; t++){
            sb.append("#").append(t).append(" ");
            N = Integer.parseInt(br.readLine());
            arr = new int[N+2][2];
            temp = new int[N+2];
            temp[N+1] = N+1;
            isSelected = new boolean[N+1];
            StringTokenizer st = new StringTokenizer(br.readLine());
            min = Integer.MAX_VALUE;
            arr[0][0] = Integer.parseInt(st.nextToken());
            arr[0][1] = Integer.parseInt(st.nextToken());
            arr[N+1][0] = Integer.parseInt(st.nextToken());
            arr[N+1][1] = Integer.parseInt(st.nextToken());
            for (int i=1; i<=N; i++) {
                arr[i][0] = Integer.parseInt(st.nextToken());
                arr[i][1] = Integer.parseInt(st.nextToken());
            }
            perm(0, 1, 0);
            sb.append(min).append("\n");
        }
        System.out.println(sb);
 
         
    }
 
    private static void perm(int flag, int cnt, int sum) {
        if (sum>min) return;
         
         
        if (cnt == N+1) {
            min = Math.min(min, sum+distance(cnt));
            return;
        }
         
        for (int i=1; i<=N; i++) {
            if ((flag & 1<<i)!=0) continue;
            temp[cnt]=i;
            perm(flag | 1<<i, cnt+1, sum+distance(cnt));
        }
    }
 
    private static int distance(int i) {
        return Math.abs(arr[temp[i-1]][0]-arr[temp[i]][0])+Math.abs(arr[temp[i-1]][1]-arr[temp[i]][1]);
    }
 
}
