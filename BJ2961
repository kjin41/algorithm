import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BJ2961 {
// 도영이가 만든 맛있는 음식
// next permutation
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		System.setIn(new FileInputStream("input2961.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		int[] sour = new int[n];
		int[] bitter = new int[n];
		for (int i=0; i<n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			sour[i] = Integer.parseInt(st.nextToken());		// 신맛
			bitter[i] = Integer.parseInt(st.nextToken());	// 쓴맛
			
		}
		int min=Integer.MAX_VALUE;
		int tempMin=Integer.MAX_VALUE;
		
		for (int i=0; i<n; i++) {
			int[] flag = new int[n];		// 조합 
			for (int j=0; j<=i; j++) {		// ex) [0,0,0,1], [0,0,1,1], [0,1,1,1], [1,1,1,1]
				flag[n-1-j] = 1;
			}
			do {
				int tempS=1;
				int tempB=0;
				
				for (int k=0; k<n; k++) {
					if (flag[k]==1) {
						tempS*=sour[k];
						tempB+=bitter[k];
						
					}
				}
				if (tempMin > Math.abs(tempS-tempB)) {
					tempMin = Math.abs(tempS-tempB);
				}
			}while(np(flag));			// 각 조합당 순서 바꾸기
			if (min > tempMin) {
				min = tempMin;
			}
		}
		
		System.out.println(min);
		
	}
	
	private static boolean np(int arr[]) {
		int n = arr.length;
		int i=n-1, j=n-1, k=n-1;
		
		while(i>0 && arr[i-1]>=arr[i])	i--;
		if (i==0) return false;
		
		while(arr[i-1]>=arr[j]) j--;
		swap(arr, i-1, j);
		
		while(i<k) {
			swap(arr, i++, k--);
		}
		return true;
	}

	private static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}
