import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BJ15683 {
// 감시
	static int N, M;
	static int arr[][];
	static int copy[][];	// arr 복사본
	static int S, visible, max, wall;
	static int temp[];		// 카메라 방향 경우의 수
	static ArrayList<int[]> cam = new ArrayList<>();
	public static void main(String[] args) throws IOException {
		System.setIn(new FileInputStream("input15683.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		arr = new int[N][M];
		
		for (int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j=0; j<M; j++) {
				int num = Integer.parseInt(st.nextToken());
				arr[i][j]=num;
				if (num!=0 && num!=6) {
					cam.add(new int[] {num, i, j});
				} else if(num==6) {
					wall++;
				}
				
			}
		}
		S = cam.size();
		temp = new int[S];
		subset(0);
		System.out.println(N*M-wall-S-max);
	}
	
	private static void subset(int cnt) {
		if (cnt==S) {
			copy = new int[N][M];
			for (int i=0; i<N; i++) {
				for (int j=0; j<M; j++) {
					copy[i][j] = arr[i][j];
				}
			}
			visible=0;
			cameraOn();
			
			return;
		}
		int[] c = cam.get(cnt);
		int n=0;
		if (c[0]==1||c[0]==3||c[0]==4)	{n=4;}
		else if(c[0]==2)	{n=2;}
		else	{n=1;}
		for (int i=0; i<n; i++) {
			temp[cnt]=i;
			subset(cnt+1);
		}
	}

	private static void cameraOn() {
		int index=0;
		for (int i=0; i<N; i++) {
			for (int j=0; j<M; j++) {
				if (arr[i][j]!=0 && arr[i][j]!=6) {
					switch (cam.get(index)[0]) {
					case 1:	no1(temp[index], i, j);	break;
					case 2:	no2(temp[index], i, j);	break;
					case 3:	no3(temp[index], i, j);	break;
					case 4:	no4(temp[index], i, j);	break;
					default:	no5(temp[index], i, j);	break;
					}
					index++;
				}
			}
		}
		
		if (max<visible) {
			max=visible;
		}
	}

	private static void no1(int dir, int r, int c) {
		if (dir==0) {	// 상
			up(r, c);
		} else if (dir==1) {	// 우
			right(r, c);
		} else if (dir==2) {	// 하
			down(r, c);
		} else {	// 좌
			left(r, c);
		} 
	}
	
	private static void no2(int dir, int r, int c) {
		if (dir==0) {	// 상하
			up(r, c);
			down(r, c);
		} else {	// 좌우
			left(r, c);
			right(r, c);
		} 
	}
	
	private static void no3(int dir, int r, int c) {
		if (dir==0) {	// 상우
			up(r, c);
			right(r, c);
		} else if (dir==1) {	// 우하
			right(r, c);
			down(r, c);
			
		} else if (dir==2) {	// 하좌
			down(r, c);
			left(r, c);
		} else {	// 좌상
			left(r, c);
			up(r, c);
		} 
	}
	
	private static void no4(int dir, int r, int c) {
		if (dir==0) {	// 상우하
			up(r, c);
			right(r, c);
			down(r, c);
		} else if (dir==1) {	// 우하좌
			right(r, c);
			down(r, c);
			left(r, c);
			
		} else if (dir==2) {	// 하좌상
			down(r, c);
			left(r, c);
			up(r, c);
		} else {	// 좌상우
			left(r, c);
			up(r, c);
			right(r, c);
		} 
	}
	
	private static void no5(int dir, int r, int c) {
		up(r, c);		// 전부다
		right(r, c);
		down(r, c);
		left(r, c);
	}
	
	private static void up(int r, int c) {
		for (int i=r-1; i>=0; i--) {	// 상
			int num = copy[i][c];
			if (num==6) 	return;
			if (num==0) {
				visible++;
				copy[i][c]=-1;
			}
		}
	}

	private static void down(int r, int c) {
		for (int i=r+1; i<N; i++) {		// 하
			int num = copy[i][c];
			if (num==6) 	return;
			if (num==0) {
				visible++;
				copy[i][c]=-1;
			}
		}
	}
	
	private static void left(int r, int c) {
		for (int i=c-1; i>=0; i--) {	// 좌
			int num = copy[r][i];
			if (num==6) 	return;
			if (num==0) {
				visible++;
				copy[r][i]=-1;
			}
		}
	}
	
	
	private static void right(int r, int c) {
		for (int i=c+1; i<M; i++) {		// 우
			int num = copy[r][i];
			if (num==6) 	return;
			if (num==0) {
				visible++;
				copy[r][i]=-1;
			}
		}
	}
}
