import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class SWExpert7465 {
// 창용 마을 무리의 개수
	static class Person{
		int num;
		Person link;
		public Person(int num, Person link) {
			super();
			this.num = num;
			this.link = link;
		}
		
	}
	
	public static void main(String[] args) throws IOException {
		System.setIn(new FileInputStream("input7465.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		StringTokenizer st = null;
		for (int t=1; t<=T; t++) {
			sb.append("#").append(t).append(" ");
			st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			Person[] people = new Person[N+1];
			
			for (int i=0; i<M; i++) {
				st = new StringTokenizer(br.readLine());
				int start = Integer.parseInt(st.nextToken());
				int end = Integer.parseInt(st.nextToken());
				people[start] = new Person(end, people[start]);
				people[end] = new Person(start, people[end]);
			}
			
			boolean[] visited = new boolean[N+1];
			int cnt=0;
			for (int i=1; i<=N; i++) {
				if (!visited[i]) {
					cnt++;
					visited[i]=true;
					Queue<Integer> queue = new LinkedList<>();
					queue.add(i);
					while(!queue.isEmpty()) {
						Person temp = people[queue.poll()];
						for (Person p=temp; p!=null; p=p.link) {
							if (!visited[p.num]) {
								visited[p.num]=true;
								queue.add(p.num);
							}
						}
					}
				}
			}
			
			sb.append(cnt).append("\n");
			
		}
		System.out.println(sb);
	}

}
