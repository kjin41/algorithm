import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class SWExpert3289 {
// 서로소 집합
	static class Node{
		int start, end;

		public Node(int start, int end) {
			super();
			this.start = start;
			this.end = end;
		}
		
	}
	
	static int parents[];
	static int N;
	static int M;
	
	
	public static void main(String[] args) throws NumberFormatException, IOException {
		System.setIn(new FileInputStream("input3289.txt"));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringBuilder sb = new StringBuilder();
		for (int t=1; t<=T; t++) {
			sb.append("#").append(t).append(" ");
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());
			make();
			for (int i=0; i<M; i++) {
				st = new StringTokenizer(br.readLine());
				int flag = Integer.parseInt(st.nextToken());
				int start = Integer.parseInt(st.nextToken());
				int end = Integer.parseInt(st.nextToken());
				if (flag==0) {
					union(start, end);
				} else {
					if (find(start)==find(end)) {
						sb.append(1);
					} else {
						sb.append(0);
					}
				}
			}
			sb.append("\n");
			
		}
		System.out.println(sb);
	}


	private static void union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		if (aRoot!=bRoot) {
			parents[bRoot] = aRoot;
		}
	}


	private static int find(int a) {
		if (a==parents[a])	return a;
		return parents[a] = find(parents[a]);
	}


	private static void make() {
		parents = new int[N+1];
		for (int i=1; i<=N; i++) {
			parents[i] = i;
		}
	}

}
